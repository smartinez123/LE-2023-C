#define LEDROJO 10
#define LEDAZUL 8
#define PULSADOR 12
#define TIEMPOANTIR 40
#define TIEMPO_LOOP 5
#define VAL_MAX 15

void debounceFSM_init();      // debe cargar el estado inicial
void debounceFSM_update();    // debe leer las entradas, resolver la lógica de transición de estados y actualizar las salidas
void buttonPressed();         // debe invertir el estado del LED1
void buttonReleased();        // debe invertir el estado del LED2 

void botonPresionado();
void botonSuelto();

typedef enum{
  BUTTON_UP,
  BUTTON_FALLING,
  BUTTON_DOWN,
  BUTTON_RISING,
} debounceState_t;

debounceState_t currentstatus;

char numero[16]{
  B11111100,
  B01100000,
  B11011010,
  B11110010,
  B01100110,
  B10110110,
  B10111110,
  B11100000,
  B11111110,
  B11110110,
  B11111010,
  B00111110,
  B10011100,
  B01111010,
  B11011110,
  B10001110,
};

uint8_t cuentaNum = 0;
void setup()
{
  pinMode(LEDROJO, OUTPUT);
  pinMode(LEDAZUL, OUTPUT);
  pinMode(PULSADOR, INPUT);
  DDRD=B11111111;
  debounceFSM_init();
  inicializar_display();
 
}

void loop(){
  debounceFSM_update();
  delay(TIEMPO_LOOP);
}
void debounceFSM_init(){
  currentstatus = BUTTON_UP;
}

void debounceFSM_update(){
  static unsigned long tprevio = millis (); //para tener mucho espacio de variable
  
  
  switch (currentstatus){
    case BUTTON_UP:
    if (digitalRead (PULSADOR) == LOW);
        currentstatus = BUTTON_FALLING;
        tprevio = millis();
      
    break;

    
    case BUTTON_DOWN:
    if (digitalRead (PULSADOR) == HIGH){
        currentstatus = BUTTON_RISING;
        tprevio = millis();
  }
    break;

    case BUTTON_FALLING:
    if (millis()-tprevio>= TIEMPOANTIR){
      if (digitalRead (PULSADOR)== LOW){
        currentstatus = BUTTON_DOWN;
        botonPresionado();
      }
      else{
        currentstatus = BUTTON_UP;
      }
    }

      
    case BUTTON_RISING:
    if (millis()-tprevio>= TIEMPOANTIR){
      if (digitalRead (PULSADOR)== HIGH){
        currentstatus = BUTTON_UP;
        botonSuelto();
      }
      else{
        currentstatus = BUTTON_DOWN;
      }
    }
  }
}       
void botonPresionado(){
     digitalWrite (LEDROJO, HIGH);
     digitalWrite (LEDAZUL, LOW);
     PORTD = numero[cuentaNum];
      if (cuentaNum == VAL_MAX) cuentaNum = 0;
       else cuentaNum++;
}

void botonSuelto(){
     digitalWrite (LEDROJO, LOW);
     digitalWrite (LEDAZUL, HIGH); 
}

void inicializar_display(void){
  PORTD = numero[0];
  
}
 
